//---------------------------------------------------------------------------------------
//  This file is part of the Lomse library.
//  Copyright (c) 2010-2011 Lomse project
//
//  Lomse is free software; you can redistribute it and/or modify it under the
//  terms of the GNU General Public License as published by the Free Software Foundation,
//  either version 3 of the License, or (at your option) any later version.
//
//  Lomse is distributed in the hope that it will be useful, but WITHOUT ANY
//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
//  PARTICULAR PURPOSE.  See the GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License along
//  with Lomse; if not, see <http://www.gnu.org/licenses/>.
//
//  For any comment, suggestion or feature request, please contact the manager of
//  the project at cecilios@users.sourceforge.net
//
//--------------------------------------------------------------------------------------

#ifndef __LOMSE_SHAPE_BASE_H__        //to avoid nested includes
#define __LOMSE_SHAPE_BASE_H__

#include "lomse_gm_basic.h"
//#include <vector>
#include <list>
using namespace std;

namespace lomse
{

////forward declarations
//class InternalModel;


////---------------------------------------------------------------------------------------
////level of shape
//enum lmEShapeLevel
//{
//    lm_eMainShape = 0,      //the normal, single shape generated by an ScoreObj
//    lm_eSecondaryShape,     //key and time signatures in system 1 for staves > 1
//    lm_ePrologShape,        //clef and key signatures in systems > 1
//};
//
//#define lmSELECTABLE         true
//#define lmNO_SELECTABLE      false





//---------------------------------------------------------------------------------------
// enums for common values: aligment, justification, placement, etc.

//line styles
enum ELineStyle { k_line_none=0, k_line_solid, k_line_long_dash,
                  k_line_short_dash, k_line_dot, k_line_dot_dash, };

//line termination styles
enum ELineCap { k_cap_none = 0, k_cap_arrowhead, k_cap_arrowtail,
                k_cap_circle, k_cap_square, k_cap_diamond, };

//line edges
enum ELineEdge
{
    k_edge_normal = 0,        // edge is perpendicular to line
    k_edge_vertical,          // edge is always a vertical line
    k_edge_horizontal         // edge is always a horizontal line
};


//---------------------------------------------------------------------------------------
//EVAlign is used to indicate vertical alignment within a block: to the top,
//middle or bottom
enum EVAlign
{
    k_valign_default = 0,   //alignment is not specified
    k_valign_top,
    k_valign_middle,
    k_valign_bottom,
};

//---------------------------------------------------------------------------------------
// EHAlign is used to indicate object justification
enum EHAlign
{
    k_halign_default = 0,   //alignment is not specified
    k_halign_left,          //object aligned on left side
    k_halign_right,         //object aligned on right side
    k_halign_justify,       //object justified on both sides
    k_halign_center,        //object centered
};

//---------------------------------------------------------------------------------------
enum ELinkType
{
	k_link_simple = 0,
    k_link_start,
	k_link_middle,
	k_link_end,
};




//---------------------------------------------------------------------------------------
class GmoSimpleShape : public GmoShape
{
public:
    virtual ~GmoSimpleShape();

protected:
    GmoSimpleShape(ImoObj* pCreatorImo, int objtype, int idx, Color color);
};

//---------------------------------------------------------------------------------------
class GmoCompositeShape : public GmoShape
{
protected:
	std::list<GmoShape*> m_components;	//constituent shapes
    bool m_fLocked;                     //constituent shapes cannot be moved

public:
    virtual ~GmoCompositeShape();

    virtual int add(GmoShape* pShape);
    inline bool is_locked() { return m_fLocked; }
    inline void unlock() { m_fLocked = false; }
    void lock();

    //virtual methods from base class
    virtual void shift_origin(const USize& shift);
    void on_draw(Drawer* pDrawer, RenderOptions& opt);

	//overrides
    void set_selected(bool value);
    void set_highlighted(bool value);

    //for unit tests
    inline std::list<GmoShape*>& get_components() { return m_components; }


protected:
    GmoCompositeShape(ImoObj* pCreatorImo, int objtype, int idx, Color color);
	void recompute_bounds();
};


}   //namespace lomse

#endif    // __LOMSE_SHAPE_BASE_H__

