//---------------------------------------------------------------------------------------
// This file is part of the Lomse library.
// Copyright (c) 2010-2012 Cecilio Salmeron. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice, this 
//      list of conditions and the following disclaimer.
//
//    * Redistributions in binary form must reproduce the above copyright notice, this
//      list of conditions and the following disclaimer in the documentation and/or
//      other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
// SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
// BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// For any comment, suggestion or feature request, please contact the manager of
// the project at cecilios@users.sourceforge.net
//---------------------------------------------------------------------------------------

                 =========================================
                  Lomse library installation instructions  
                 =========================================

This document contains instructions for building Lomse library and tests
program from sources, on all platforms.


Requirements
============
- CMake version 2.8 or higher
- UnitTest++ 1.3.0 or higher (for running the test program)
- FreeType 2.3.5-1
- Boost Threads 1.42 or higher


Table Of Content
================
    A. General notes and requirements. ***** PLEASE READ THIS FIRST *****
    B. Quick installation guide
    C. How to generate the makefile or project file for Lomse
        1) Building on Linux
        2) Building on Windows
            2.a) Using CMake GUI program.
            2.b) Using a command window:
    D. "In-source" vs. "Out-of-source" builds



A. General notes and requirements
==================================

1. No makefiles or IDE project files are provided. All makefiles are generated
   with CMake using CMake build system. CMake can generate different kinds of
   native build files for your system (e.g. Unix Makefiles, Eclipse CDT 4.0
   project files, Visual Studio project files). You need CMake 2.8.0 or later
   on your platform. You can download it from
        http://www.cmake.org/cmake/resources/software.html
   Just download and install it (very simple). In Linux, you can install it
   using the package manager:

        sudo apt-get install cmake


2. For testing, Lomse project uses UnitTest++. For Windows a pre-built library
   is included in source tree, so you do not have to do anything to get this
   package. But for Linux and other platforms you must install UnitTest++
   package. Instructions are provided in the Linux section.


3. I have only generated and tested on following platforms:

    - Windows XP, using Visual Studio .NET 2003 (VS7) (generator "Visual Studio 7 .NET")
    - Linux Ubuntu 10.4, Using CodeBlocs with linux makefiles (generator "CodeBlocks - Unix Makefiles")
    - Linux Ubuntu 10.4, Using linux makefiles  (generator "Unix Makefiles")

   No idea if there will be problems for other platforms/configurations. But if
   you try, please let me know for updating the documentation.



B. Quick installation guide
============================

Using CMake command-line interface:

1. Unpack the distribution and change directory to the top level source tree.

2. (Recommended) Create a directory to hold your build files (e.g. 'mkdir build')

3. Change directory to the directory you created in the previous step (for the above example, you can use 'cd build')

4. Run cmake to generate the makefiles. For example, in linux:
        For using CodeBlocs:
            cmake -G "CodeBlocks - Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug ../lomse
        For using makefiles:
            cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug ../lomse 


5. Now you've generated Makefiles using cmake. So run 'make' to build the package.

    
    


C. How to generate the makefile or project file for Lomse
==========================================================

You need CMake 2.8.0 or later.


1) Building on Linux
--------------------

First, you need to install the required packages. Usually the Boost libraries
(http://www.boost.org/) and the FreeType library (http://www.freetype.org/) are
already included in your Linux distro. So, usually, the only package you need 
to install is UnitTest++. Installing it should be as simple as typing the 
following commands in your terminal (on Debian-like systems):

    sudo apt-get install libunittest++-dev


Now you can procedd to build Lomse.

In following instructions it is assumed you want to generate Makefiles. Open a
terminal window, move to the folder in which you have unpackaged the lomse
sources, and create a folder for building. For instance:

	checkout a working copy:
		mkdir lomse
		cd lomse
		svn co https://lomse.svn.sourceforge.net/svnroot/lomse/trunk .

	create folder to build:
    	cd ..
    	mkdir build-lomse
    	cd build-lomse

Now, using CMake, proceed to create the makefile:

    cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug ../lomse  

Now, build the lomse library, the library unit-testing program (testlib) and
the examples:

    make

        ...
        Linking CXX executable bin/testlib
        Lomse library tests runner

        Success: 544 tests passed.
        Test time: 0.77 seconds.
        [100%] Built target testlib

Run the example:
 	cd bin
	./example_1



Alternatively, build step-by-step, checking results:

	make lomse			# build the library
		...
		[100%] Built target lomse

	make testlib		# build testlib and check library is ok
		...
		Lomse library tests runner

        Success: 544 tests passed.
        Test time: 0.77 seconds.
		[100%] Built target testlib

		The number of tests will grow over time, and the times reported will
		depend on your computer. 

	make example_1			# build example application:
		...
		[100%] Built target example_1

 	cd bin				# run example app.
	./example_1


In case of problems, before repeating al the build procedure (after fixing the errors), the makefile should be re-created. The safest way to proceed is to delete the whole content of the build folder and start againg from step 1. So move to folder to build and clean all:

    cd ../build-lomse
    rm * -r     #AWARE: BE SURE YOU ARE IN THE build-lomse FOLDER !!!!
    and repeat build process from step 1.


When build is ok and test and example works, you can install lomse:

    sudo make install

That installs Lomse on your system. By default, Lomse library is installed 
in <prefix>/lib and header files in <prefix>/include/lomse, with <prefix>
defaulting to usr/local.

You can change the install location by running cmake like this:

    cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=/new/install/prefix  \
        -DCMAKE_BUILD_TYPE=Release ../lomse

Building from source in the repository is recommended, since code in the
repository should always be stable. If it's not, that's a bug to report.


2) Building on Windows
----------------------

In this description it is assumed you want to generate Visual Studio .NET 2003
project files. The procedure for CodeBlocks or any other tool is similar. Just
replace Visual Studio with your favourite tool.

To create the project file / makefile you have two options:

    a) Using the CMake GUI program.
    b) Using a command window.
    

2.a) Using CMake GUI program.

    1. Open CMake GUI program. (C:\Program files\CMake\bin\cmake-gui.exe)
    
    2. Enter requested data in following fields:
        - Where is the sorce code: <path-to-lomse-root>
            i.e.: D:/projects/lomse
        - Where to build the binaries: <folder/to/place/makefiles>
            i.e.: D:/projects/lomse/build

    3. Press the 'Configure' button. A window will open and you will be asked for which tool you would like to generate the makefile. Select, for instance, "Visual Studio 7 .NET".

    4. If there are lines marked in red color. press again the 'Configure' button. Repeat this until no red lines.
    
    5. Press the 'Generate' button.

    Done. Makefiles for the selected platform and generator will be created in the specified folder.
    
    Now open the makefiles/project files and proceed to build the library and the test program. All tests will run automatically when the tests program is built.


2.b) Using a command window:

    The procedure is similar, but using the command window.
    
    1. Open the command window and move to the lomse root folder:
    
        cd <path-to-lomse-root>
        
    2. Create a new folder for the makefiles. i.e.  <path-to-lomse-root>/build/
    
        mkdir build

    3. Now generate the makefiles:

        cmake -G "Visual Studio 7 .NET" ./build

    This should create .sln and .vcproj files for Visual Studio in the 'build' directory.
    
    You can also generate project files for some other VS version. You can get a list of all supported generators by typing in and running cmake.




D. "In-source" vs. "Out-of-source" builds
===========================================

RECOMMENDED WAY OF INSTALLING LOMSE: Out-of-source

When you generates the makefiles, they have to go somewhere. An "in-source"
build puts them in your source tree (i.e. /lomse/build). In the next example
the makefiles are placed in the same directory as the source code. Therefore,
it is an "in-place" build:

    cd lomse
    mkdir build
    cmake -G "Unix Makefiles" ./
    make

An out-of-source build puts them in a completely separate directory, so that
your source tree is unchanged. Out-of-source builds are recommended, as you can
build multiple variants in separate directories, i.e.:

        /projects
            /lomse                  <-- the source tree
            /lomse-debug
            /lomse-release

In the following example, an out-of-place build is performed:

    cd lomse
    mkdir lomse-debug
    cd lomse-debug
    cmake -G "Unix Makefiles" ../lomse
    make

Note: Before performing an out-of-source build, ensure that all CMake generated
in-source build information is removed from the source directory, e.g.,
CMakeFiles directory, CMakeCache.txt.




